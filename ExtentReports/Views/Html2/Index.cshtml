@using AventStack.ExtentReports
@using RazorEngine
@using RazorEngine.Templating

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Extent Framework</title>
    <link rel="shortcut icon" href="https://cdn.rawgit.com/extent-framework/extent-github-cdn/d74480e/commons/img/logo.png">
    <link rel="stylesheet" href="styles.css" />
	<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
	<script type="text/javascript">
		/*! json-tree - v0.2.2 - 2017-09-25, MIT LICENSE */
		var JSONTree=function(){var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"},t=0,r=0;this.create=function(n,t){return r+=1,N(u(n,0,!1),{class:"jstValue"})};var e=function(t){return t.replace(/[&<>'"]/g,function(t){return n[t]})},s=function(){return r+"_"+t++},u=function(n,t,r){if(null===n)return f(r?t:0);switch(typeof n){case"boolean":return l(n,r?t:0);case"number":return i(n,r?t:0);case"string":return o(n,r?t:0);default:return n instanceof Array?a(n,t,r):c(n,t,r)}},c=function(n,t,r){var e=s(),u=Object.keys(n).map(function(r){return j(r,n[r],t+1,!0)}).join(m()),c=[g("{",r?t:0,e),N(u,{id:e}),p("}",t)].join("\n");return N(c,{})},a=function(n,t,r){var e=s(),c=n.map(function(n){return u(n,t+1,!0)}).join(m());return[g("[",r?t:0,e),N(c,{id:e}),p("]",t)].join("\n")},o=function(n,t){var r=e(JSON.stringify(n));return N(v(r,t),{class:"jstStr"})},i=function(n,t){return N(v(n,t),{class:"jstNum"})},l=function(n,t){return N(v(n,t),{class:"jstBool"})},f=function(n){return N(v("null",n),{class:"jstNull"})},j=function(n,t,r){var s=v(e(JSON.stringify(n))+": ",r),c=N(u(t,r,!1),{});return N(s+c,{class:"jstProperty"})},m=function(){return N(",\n",{class:"jstComma"})},N=function(n,t){return d("span",t,n)},d=function(n,t,r){return"<"+n+Object.keys(t).map(function(n){return" "+n+'="'+t[n]+'"'}).join("")+">"+r+"</"+n+">"},g=function(n,t,r){return N(v(n,t),{class:"jstBracket"})+N("",{class:"jstFold",onclick:"JSONTree.toggle('"+r+"')"})};this.toggle=function(n){var t=document.getElementById(n),r=t.parentNode,e=t.previousElementSibling;""===t.className?(t.className="jstHiddenBlock",r.className="jstFolded",e.className="jstExpand"):(t.className="",r.className="",e.className="jstFold")};var p=function(n,t){return N(v(n,t),{})},v=function(n,t){return Array(2*t+1).join(" ")+n};return this}();
	</script>
</head>
<body class="test-view">
    <div class="app">
        <div class="layout">
            @Include("Navbar")
            @Include("Sidenav")
            <div class="page-container">
                <div class="main-content">
                    <div class="avt-container row">
                        <div class="test-list">
                            <div class="test-list-tools">
                                <ul class="tools pull-left">
                                    <li>
                                        <a href="">
                                            <span>Tests</span>
                                        </a>
                                    </li> 
                                </ul>
                                <ul class="tools text-right">
                                    <li>
                                        <div class="dropdown">
											<a href="dropdown-toggle" data-toggle="dropdown">
												<i class="fa fa-warning"></i>
											</a>
											<div class="dropdown-menu">
												@if (Model.ContainsStatus(Status.Pass)) {<a class="dropdown-item" href="#"><span>Pass</span><span class="status success pull-right"></span></a>}
												@if (Model.ContainsStatus(Status.Fail)) {<a class="dropdown-item" href="#"><span>Fail</span><span class="status danger pull-right"></span></a>}
												@if (Model.ContainsStatus(Status.Fatal)) {<a class="dropdown-item" href="#"><span>Fatal</span><span class="status danger pull-right"></span></a>}
												@if (Model.ContainsStatus(Status.Error)) {<a class="dropdown-item" href="#"><span>Error</span><span class="status warning pull-right"></span></a>}
												@if (Model.ContainsStatus(Status.Warning)) {<a class="dropdown-item" href="#"><span>Warning</span><span class="status warning pull-right"></span></a>}
												@if (Model.ContainsStatus(Status.Skip)) {<a class="dropdown-item" href="#"><span>Skip</span><span class="status warning pull-right"></span></a>}
											</div>
										</div>
                                    </li>
									@if (Model.AuthorContext.Context.Count > 0)
									{
                                    <li>
                                        <div class="dropdown">
											<a href="dropdown-toggle" data-toggle="dropdown">
												<i class="fa fa-user"></i>
											</a>
											<div class="dropdown-menu">
												@foreach (var author in Model.AuthorContext.Context) 
												{
													<a class="dropdown-item" href="#">@author.Name</a>
												}
											</div>
										</div>
                                    </li>
									}
									@if (Model.CategoryContext.Context.Count > 0)
									{
									<li>
                                        <div class="dropdown">
											<a href="dropdown-toggle" data-toggle="dropdown">
												<i class="fa fa-tag"></i>
											</a>
											<div class="dropdown-menu">
												@foreach (var category in Model.CategoryContext.Context) 
												{
													<a class="dropdown-item" href="#">@category.Name</a>
												}
											</div>
										</div>
                                    </li>
									}
									@if (Model.DeviceContext.Context.Count > 0)
									{
									<li>
										<div class="dropdown">
											<a href="dropdown-toggle" data-toggle="dropdown">
												<i class="fa fa-tablet"></i>
											</a>
                                            <div class="dropdown-menu">
                                                @foreach (var device in Model.DeviceContext.Context) 
												{
													<a class="dropdown-item" href="#">@device.Name</a>
												}
                                            </div>
                                        </div>
                                    </li>
									}
                                </ul>
                            </div>
                            <div class="avt-wrapper scrollable">
                                <ul id="test-list-item" class="test-list-item">
                                	@foreach (var test in Model.TestList)
									{
                                    <li class="test">
                                        <div class="status-avatar @test.Status.ToString().ToLower()-bg">
                                            @test.Status
                                        </div> 
                                        <div>
                                            <div class="test-detail"> 
                                                <p class="name">@test.Name</p> 
                                                <p class="duration">@test.RunDuration.ToString("''h'h:'m'm:'s's+'fff'ms'")</p> 
                                                <span class="datetime">@test.StartTime.ToString("HH:mm:ss tt")</span>
                                            </div>
                                        </div>
										<div class="test-content-detail">
											<div class="detail-head">
												<div class="p-v-10 d-inline-block">	
													<div class="info">
														<h4 class="test-status text-@test.Status.ToString().ToLower()">@test.Name</h4>
														<span class='badge badge-success'>@test.StartTime</span>
														<span class='badge badge-danger'>@test.EndTime</span>
														<span class='badge badge-default'>@test.RunDuration.ToString("''h'h:'m'm:'s's+'fff'ms'")</span>
													</div>
													@if (test.HasAttributes)
													{
													<div class="m-t-15">
		                                        		@Include("Attributes", test)
													</div>
													}
													@if (!string.IsNullOrEmpty(test.Description))
													{
													<div class="m-t-10 m-l-5">
														@test.Description
													</div>
													}
												</div>
												<!-- <ul class="tools">
													<li>Fri 8:40 AM</li>
													<li class="d-none d-md-inline-block">
														<a href="">
															<i class="fa fa-reply"></i>
														</a>
													</li>
												</ul> -->
											</div> 
											<div class="detail-body m-t-20">
												@if (test.HasLog)
												{
													@Include("Log", test)
												}
											</div>    
											@if (test.HasScreenCapture)
											{
											<div class="detail-foot">
												<ul class="attachments">
		                                    		@foreach (var sc in test.ScreenCaptureContext.All())
													{
													<li>
														<a href="@sc.ScreenCapturePath" data-featherlight="image">
															<div class="file-icon">
																<i class="fa fa-file-image-o"></i> 
															</div>
															<div class="file-info">
		                                                		@if (sc.IsBase64)
																{
		                                                			<span class="file-name">base64</span>
		                                                    		<span class="file-size">0Kb</span>
		                                                		} else {
		                                                			<span class="file-name">@sc.Name</span>
		                                                    		<span class="file-size"> @(sc.FileSize)Kb</span>
		                                                		}
															</div>
														</a>
													</li>
													}
												</ul>
											</div>
											}
											@if (test.HasChildren)
											{
		                                		@Include("RecurseNodes", test)
											}
										</div>
                                    </li>
                                    }
                                </ul>    
                            </div>
                        </div>
                        <div class="test-content scrollable"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
	<script type='text/javascript'>
		@Model.MasterConfig.GetValue("js")
	</script>
    <script src="scripts.js"></script>
</body>
</html>